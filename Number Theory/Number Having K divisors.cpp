#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define eb emplace_back
#define nl '\n'
#define deb(x) cerr << #x" = " << x << nl
#define in() ( { int a ; scanf("%d", &a); a; } )

const int N = 3020;
const int mod = 1e9 + 7;

namespace pcf{
    ///   Prime-Counting Function
    ///   initialize once by calling init()
    ///   Legendre(n) and Lehmer(n) returns the number of primes less than or equal to n
    ///   Lehmer(n) is faster

    #define MAXN 500010 /// initial sieve limit
    #define MAX_PRIMES 500010 /// max size of the prime array for sieve
    #define PHI_N 100000
    #define PHI_K 100

    unsigned int ar[(MAXN >> 6) + 5] = {0};
    int len = 0; /// total number of primes generated by sieve
    int primes[MAX_PRIMES];
    int counter[MAXN]; /// counter[m] --> number of primes <= i
    int phi_dp[PHI_N][PHI_K]; /// precal of phi(n,k)

	bitset <MAXN> isComp;
	//bool isComp[MAXN];
    void Sieve(int N){
        int  i,j,sq = sqrt(N);
        isComp[1] = true;
        for(i=4;i<=N;i+=2) isComp[i] = true;
        for(i=3;i<=sq;i+=2){
            if(!isComp[i]){
                for(j=i*i;j<=N;j+=i+i) isComp[j] = 1;
            }
        }
        for (i = 1; i <= N; i++){
            if (!isComp[i]) primes[len++] = i;
            counter[i] = len;
        }
    }

    void init(){
        Sieve(MAXN - 1);
        /// precalculation of phi upto size (PHI_N,PHI_K)
        int k , n , res;
        for(n = 0; n < PHI_N; n++) phi_dp[n][0] = n;
        for (k = 1; k < PHI_K; k++){
            for (n = 0; n < PHI_N; n++){
                phi_dp[n][k] = phi_dp[n][k - 1] - phi_dp[n / primes[k - 1]][k - 1];
            }
        }
    }
    /// returns number of integers less or equal n which are
    /// not divisible by any of the first k primes
    /// recurrence --> phi( n , k ) = phi( n , k-1 ) - phi( n / p_k , k-1)
    ///for sum of primes phi(n,k)=phi(n,k-1)-p_k*phi(n/p_k,k-1)
    long long phi(long long n, int k){
        if (n < PHI_N && k < PHI_K) return phi_dp[n][k];
        if (k == 1) return ((++n) >> 1);
        if (primes[k - 1] >= n) return 1;
        return phi(n, k - 1) - phi(n / primes[k - 1], k - 1);
    }
    ///complexity: n^(2/3).(log n^(1/3))
    long long Lehmer(long long n){
        if (n < MAXN) return counter[n];

        long long w , res = 0;
        int i, j, a, b, c, lim;
        b = sqrt(n), c = Lehmer(cbrt(n)), a = Lehmer(sqrt(b)), b = Lehmer(b);
        res = phi(n, a) + (((b + a - 2) * (b - a + 1)) >> 1);
        for (i = a; i < b; i++){
            w = n / primes[i];
            lim = Lehmer(sqrt(w)), res -= Lehmer(w);

            if (i <= c){
                for (j = i; j < lim; j++){
                    res += j;
                    res -= Lehmer(w / primes[j]);
                }
            }
        }
        return res;
    }
}
long long pw[N][33];
ll power(int n, int k)
{
    if (k > 31) return 1LL << 32;
    if (n < N && pw[n][k]) return pw[n][k];
    ll ans = 1;
    while(k--){
        ans *= n;
        if(ans >= (1LL << 31)) return ans;
    }
    return ans;
}
vector<int> d[N], pr[N];
int yo(int n, int k, int last)
{
    if (n == 0) return 0;
    if (k == 1) return 1;
    if (n == 1) return 0;
    if(k == 2) return pcf::Lehmer(n) - last;
    if(d[k].size() == 1){
        int ans = last - 1, l = last, r = 1 << 16;
        while(l <= r){
            int mid = (l + r) >> 1;
            ll p = power(pcf::primes[mid], d[k][0] - 1);
            if(p > n) r = mid - 1;
            else l = mid + 1, ans = mid;
        }
        return ans - last + 1;
    }
    int ans = 0;
    for(auto x: d[k]){
        for(int i = last; i < pcf::len; i++){
            ll p = power(pcf::primes[i], x - 1);
            if (p > n) break;
            if (k / x != 1 && n / p < pcf::primes[i + 1]) break;
            ans += yo(n / p, k / x, i + 1);
        }
    }
    return ans;
}
int32_t main()
{
    pcf::init();
    for(int i = 2; i < N; i++) for(int j = i; j < N; j+= i) d[j].eb(i);
    for (int i = 2; i < N; i++) {
        for (int j = 0; j < 32; j++) {
            pw[i][j] = power(i, j);
        }
    }
    int t = in(), cs = 0;
    while(t--){
        int l = in(), r = in(), k = in();
        int ans = 0;
        if(k < 2000){
            int up = yo(r, k, 0);
            int d = yo(l - 1, k, 0);
            ans = up - d;
        }
        printf("Case %d: %d\n", ++cs, ans);
    }
    return 0;
}
// https://algo.codemarshal.org/contests/mist-ncpc-2020/problems/E